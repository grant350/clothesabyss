
# Thye next line updates PATH for the Google Cloud SDK.


# The next line enables shell command completion for gcloud.

export NVM_DIR=~/.nvm
source $(brew --prefix nvm)/nvm.sh

alias name=\Users


findProcess(){
	read  -p "port: "  arg1 ;
	lsof -n -i4TCP:$arg1 | grep LISTEN
}
alias findProcess=findProcess

githubSSH(){
	echo "testing ssh key";
	message= ssh -T git@github.com;
	if [message]; then
		echo "key exist"
 	else 
		echo "key does not exist making key"	
	fi

	git remote set-url origin git@github.com:grant350/clothesabyss.git
}

alias name=\Users

vspaths(){
	echo "path:" $1;
	open -a /Users/`name`/Desktop/Visual\ Studio\ Code.app $1;
 		
		FILE=./SpecRunner.html
		if test -f "$FILE"; then
    			echo "$FILE exists."
			open -a /Users/`name`/Desktop/Google\ Chrome.app ./SpecRunner.html;
	else 
	    			echo "$FILE doesn't exists."

		fi

}
alias vspath=vspaths\ "$arg1"

atompaths(){
	echo "path:" $1;
	open -a /Users/grant/Desktop/Atom.app $1;
}
alias atompath=atompaths\ "$arg1"





start(){
	cd "/USERS/grant/desktop/github/ClothesabyssFull";
 	./cloud_sql_proxy -instances="clothesabyss:us-central1:maindatabase=tcp:3306";
 }
alias startsql=start
alias sqlstart=start

moveNonApps(){
cd /users/grant/desktop;
 find ./ -maxdepth 1 -not -name "*.app" -exec mv {} ./IMPORTANT \;
}
alias moveNonApps=moveNonApps;

export PATH=/usr/local/bin:/usr/local/sbin:$PATH
PATH="/Library/Frameworks/Python.framework/Versions/3.6/bin:${PATH}"
export PATH=~/.npm-global/bin:$PATH
echo $PATH

if [ -f '/Users/grant/Desktop/google-cloud-sdk/path.bash.inc' ]; then 
    source "/Users/grant/Desktop/google-cloud-sdk/path.bash.inc" ;
fi
if [ -f '/Users/grant/Desktop/google-cloud-sdk/completion.bash.inc' ]; then
source "/Users/grant/Desktop/google-cloud-sdk/completion.bash.inc" ;
 fi

alias pip=pip3



MainProject(){
	xterm -e  command ~/start.sh
	xterm -e  command ~/ngserve.sh
	xterm -e  command ~/nodeserver.sh
}


alias MainProject=MainProject;




back() {
arg1=$1
for ((i=1; i<=$arg1; i++))
do
x=`pwd`
echo $x
  if [ $x != / ]; then
 cd .. ;
else break
fi
done
}


ejection(){
	read -p "ejectdrive name : " drivename
	hdiutil eject /Volumes/$drivename
}



export DISPLAY=127.0.0.1
alias eject=ejection

alias python=python3
alias desk=cd\ /Users/`name`/desktop
desk
Echo "Hello " `name`




killbash(){
sudo killall VDCAssistant;
 sudo killall AppleCameraAssistant;
 sudo  killall FaceTime;
 sudo  killall Messages;
 logout
 killall Terminal
}

myip(){
echo "runn my ip";
#dig + short myip.opendns.com @resolver1.opendns.com
dig -4 TXT +short o-o.myaddr.l.google.com @ns1.google.com

}

alias myip=myip

getpid (){
read  -p "chooseProcessName:: "  arg1 ;
 ps -ef | grep $arg1
	ps aux |grep -i $arg1 | grep -v grep | awk '{ print $2; print $2; print $2; print $2; print $2; x=$2 }' ;
x
x
x

}


# alias forceremove=rm\-rf
alias remove=rm
alias copy=cp
alias newfile=touch
alias newfolder=mkdir
alias showfiles=ls
alias copycontent=cat
alias closebash=killbash
alias discord="\open https://discordapp.com/channels/@me/585336389697273856 -na /Users/`name`/Desktop/Google\ Chrome.app";
alias clothesabyss="\open https://clothesabyss.com -na /Users/`name`/Desktop/Google\ Chrome.app";
alias chrome="\open -a /Applications/Google\ Chrome.app"
alias safari="\open -a /Applications/safari.app"
alias facetime="\open -a  /Applications/facetime.app"
alias getpid=getpid




alias k=killalls
killalls () {
read -p "process:" process
`sudo kill -9 $process`
}




quickfind () {

sudo -v

read -p "would you like to use your current directory y or n ::" currentdirectory
	if [ $currentdirectory == y ]; then
		path=./ ;
	else
  	read -p "all or ABSPath :" path ;
fi


read -p "search directories y or n::" directory
read -p "Searchquery :" Searchquery ;
read -p "Extension:" Extension ;
read -p "Command:" Command ;
errorpath=/Users/`name`/desktop



if [ $Command == mv ]; then
          read -p "enter path2 :" path2
	  if [ $directory == y ]; then
		    if [ $path == all ]; then
    			sudo find . -maxdepth 2 -name "$Searchquery*" -exec mv -f '{}' $path2  \; ;
		    else
    			sudo find $path -maxdepth 2 -name "$Searchquery*"  -exec mv -f '{}' $path2  \;
		    fi ;
    else
        if [  $path == all ]; then
    			sudo find . -maxdepth 2  -name "$Searchquery*.$Extension"  -exec mv -f '{}' $path2  \; ;
		   else
    			sudo find $path -maxdepth 2 -name "$Searchquery*.$Extension" -exec mv  -f '{}' $path2  \;
		    fi
  	fi ;
fi




if [ $Command == open ]; then

	if [ $path == all ]; then

				if [ $directory == y ]; then
			sudo find . -name "$Searchquery*" -exec open '{}'  \;
		else

			read -p "if this is an app would you like to open a file with it? y or n :: " openfilextra ;

			if [ $openfilextra == y ]; then
    				read -p "give filename :: " filename
						sudo find .  -name "$Searchquery*.app" -exec open  -a $filename '{}'  \; ;
				else
    				sudo find .  -name "$Searchquery*.$Extension" -exec open '{}'  \;
			fi ;


		fi ;



		else

		if [ $directory == y ]; then
			sudo find $path -name "$Searchquery*" -exec open '{}'  \;
		else

			read -p "if this is an app would you like to open a file with it? y or n :: " openfilextra ;

			if [ $openfilextra == y ]; then
    				read -p "give filename :: " filename
					sudo find  $path -name "$Searchquery*.app" -exec open -a $filename '{}'  \; ;
				else
    					sudo find $path -name "$Searchquery*.$Extension" -exec open '{}'  \;
			fi ;


		fi ;
fi


 fi



	if [ $Command == rm ]; then
		read -p "are you sure? y / n ::" answer
		read -p "search folders or dot files, if dot file put dot first in Searchquery? y / n ::" folders
	       read -p "Searchquery? ::" Searchquery

  if [ $answer == y ]; then

    if [ $folders == n ]; then
      if [ $path == all ] ; then
			     sudo find  . -type f -name "$Searchquery*.$Extension" -exec rm -rf '{}'  \;
			else
					 sudo find  $path -type f -name "$Searchquery*.$Extension" -exec rm -rf '{}'  \;
			fi
 		else

      if [ $path == all ] ; then
			     sudo find  .  -type d  -name "$Searchquery" -exec rm -rf '{}'  \;
			else
			     sudo find  $path -type d  -name "$Searchquery" -exec rm -rf '{}'  \;
			fi
		fi ;
  fi ;

fi










if [ $Command == cat ]; then
      read -p "if dot file put dot first in Searchquery?  y / n ::" dotfile
	    read -p "copy file to which path to file that can be coped to ? ::" path2
      if [ $dotfile == n ]; then
			     if [ $path == all ]; then
				         sudo find  . -name "$Searchquery*.$Extension" -exec cat '{}' > $path2  \; ;
			     else
    			       sudo find $path -name "$Searchquery*.$Extension" -exec cat '{}' > $path2 \;
			     fi ;

		  else
			     if [ $path == all ]; then
				         sudo find  . -name "$Searchquery" -exec cat '{}' > $path2  \; ;
			     else
    			       sudo find $path -name "$Searchquery" -exec cat '{}' > $path2 \;
			     fi ;
 		  fi ;
fi
}

alias qf=quickfind
alias ff=quickfind
alias sf=quickfind
alias searchfiles=quickfind
alias lookforfiles=quickfind
alias back=back



alias ngclothesabyss=" cd /Users/`name`/desktop/Clothesabyss-app;
 open  /Users/`name`/desktop/Clothesabyss-app -a  /Users/`name`/desktop/atom.app;
open  -a /Applications/Google\ Chrome.app  http://localhost:4200; 
ng serve  "

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/grant/google-cloud-sdk/path.bash.inc' ]; then . '/Users/grant/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/grant/google-cloud-sdk/completion.bash.inc' ]; then . '/Users/grant/google-cloud-sdk/completion.bash.inc'; fi

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/grant/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/grant/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/grant/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/grant/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

